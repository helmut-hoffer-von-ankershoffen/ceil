---

- name: "Check all hosts accessible"
  assert:
    that:
    - ansible_play_hosts == ansible_play_hosts_all

- name: "Ensure hostname set"
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname is match('(\d{1,3}\.){3}\d{1,3}')
  register: hostname

- name: "Cloud-init must not manage /etc/hosts (does not work)"
  lineinfile:
    dest: "{{ item }}"
    regexp: 'manage_etc_hosts:.+$'
    line: "manage_etc_hosts: false"
    state: present
  become: true
  register: hostname
  with_items:
    - /boot/user-data
    - /etc/cloud/cloud.cfg
    - /var/lib/cloud/instances/pirate001/user-data.txt
    - /var/lib/cloud/instances/pirate001/user-data.txt.i
    - /var/lib/cloud/instances/pirate001/cloud-config.txt

- name: "Ensure router hostname in /etc/hosts"
  lineinfile:
    dest: /etc/hosts
    regexp: '{{ hostvars[item].ansible_default_ipv4.address }}.+$'
    line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_fqdn }} {{ hostvars[item].ansible_hostname }}"
    state: present
  with_items: "{{ groups.all }}"
  become: true
  register: hostname

- name: "Disable swap in fstab"
  replace:
    path: /etc/fstab
    regexp: '^(.+?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  register: swap

- name: "apt-get update"
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    cache_valid_time: 86400

- name: "apt-get upgrade"
  apt:
    upgrade: full
  register: upgrade

- name: "Install prerequisites"
  apt:
    state: latest
    pkg:
    - ntp
    - telnet
    - ca-certificates
    - curl
    - gnupg2
    - software-properties-common
    - ipvsadm

- name: "Reboot"
  shell: sleep 5 && sync && shutdown -r now "Ansible Reboot"
  async: 1
  poll: 0
  ignore_errors: true
  when: hostname.changed or swap.changed or upgrade.changed
  register: rebooted

- name: "Wait for up"
  wait_for_connection:
    delay: 5
    connect_timeout: 5
    sleep: 1
    timeout: 240
  when: rebooted.changed
